var searchIndex = {};
searchIndex['test_assembler'] = {"items":[[0,"","test_assembler","A set of types for building complex binary streams.",null,null],[3,"RealLabel","","The inner workings of `Label`. Don't instanitate this, instantiate `Label`.",null,null],[3,"Label","","A `Label` represents a value not yet known that is stored in a `Section`.",null,null],[3,"Section","","A section is a sequence of bytes, constructed by appending bytes to the end.",null,null],[12,"endian","","The current endianness of the writer.",0,null],[4,"Endian","","Possible byte orders",null,null],[13,"Big","","",1,null],[13,"Little","","",1,null],[4,"LabelOrNum","","An enum to hold `Label`s or `Num`s.",null,null],[13,"Label","","",2,null],[13,"Num","","",2,null],[17,"DEFAULT_ENDIAN","","The default endianness for this system.",null,null],[8,"LabelMaker","","Methods for creating a `Label` (or a `RealLabel`, but don't do that).",null,null],[10,"new","","Create an undefined label.",3,{"inputs":[{"name":"labelmaker"}],"output":{"name":"self"}}],[10,"from_const","","Create a label with a constant value `val`.",3,{"inputs":[{"name":"labelmaker"},{"name":"u64"}],"output":{"name":"self"}}],[10,"from_label","","Create a label whose value is equal to `other`.",3,{"inputs":[{"name":"labelmaker"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_label_offset","","Create a label whose value is equal to `other` plus `offset`.",3,{"inputs":[{"name":"labelmaker"},{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[8,"Num","","A marker trait for number types.",null,null],[8,"ToLabelOrNum","","A trait to allow passing numbers or Labels.",null,null],[10,"to_labelornum","","",4,{"inputs":[{"name":"tolabelornum"}],"output":{"name":"labelornum"}}],[11,"eq","","",1,{"inputs":[{"name":"endian"},{"name":"endian"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"endian"},{"name":"endian"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"endian"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"endian"}],"output":{"name":"endian"}}],[11,"value","","Get the constant value of the `RealLabel`, if known.",5,{"inputs":[{"name":"reallabel"}],"output":{"name":"option"}}],[11,"offset","","Get the relative offset from another label, if possible.",5,{"inputs":[{"name":"reallabel"},{"name":"reallabel"}],"output":{"name":"option"}}],[11,"set_const","","Set this `RealLabel`s value to `val`.",5,{"inputs":[{"name":"reallabel"},{"name":"u64"}],"output":null}],[11,"set","","Set this `RealLabel`s value equal to `other`.",5,{"inputs":[{"name":"reallabel"},{"name":"reallabel"}],"output":null}],[11,"new","","",5,{"inputs":[{"name":"reallabel"}],"output":{"name":"reallabel"}}],[11,"from_const","","",5,{"inputs":[{"name":"reallabel"},{"name":"u64"}],"output":{"name":"reallabel"}}],[11,"from_label","","",5,{"inputs":[{"name":"reallabel"},{"name":"reallabel"}],"output":{"name":"reallabel"}}],[11,"from_label_offset","","",5,{"inputs":[{"name":"reallabel"},{"name":"reallabel"},{"name":"i64"}],"output":{"name":"reallabel"}}],[11,"clone","","",6,{"inputs":[{"name":"label"}],"output":{"name":"label"}}],[11,"deref","","",6,{"inputs":[{"name":"label"}],"output":{"name":"reallabel"}}],[11,"new","","",6,{"inputs":[{"name":"label"}],"output":{"name":"label"}}],[11,"from_const","","",6,{"inputs":[{"name":"label"},{"name":"u64"}],"output":{"name":"label"}}],[11,"from_label","","",6,{"inputs":[{"name":"label"},{"name":"label"}],"output":{"name":"label"}}],[11,"from_label_offset","","",6,{"inputs":[{"name":"label"},{"name":"label"},{"name":"i64"}],"output":{"name":"label"}}],[11,"new","","Construct a `Section` with platform-default endianness.",0,{"inputs":[{"name":"section"}],"output":{"name":"section"}}],[11,"with_endian","","Construct a `Section` with `endian` endianness.",0,{"inputs":[{"name":"section"},{"name":"endian"}],"output":{"name":"section"}}],[11,"size","","Return the current size of the section.",0,{"inputs":[{"name":"section"}],"output":{"name":"u64"}}],[11,"get_contents","","Get the contents of this section as a slice of bytes.",0,{"inputs":[{"name":"section"}],"output":{"name":"option"}}],[11,"append_bytes","","Append `data` to the end of this section.",0,null],[11,"append_repeated","","Append `count` copies of `byte` to the end of this section.",0,{"inputs":[{"name":"section"},{"name":"u8"},{"name":"usize"}],"output":{"name":"section"}}],[11,"D8","","Append `byte` with the Section's default endianness.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"L8","","Append `byte` as little-endian (identical to `D8`).",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"B8","","Append `byte` as big-endian (identical to `D8`).",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"D16","","Append `word` with the Section's default endianness.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"L16","","Append `word` as little-endian.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"B16","","Append `word` as big-endian.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"D32","","Append `dword` with the Section's default endianness.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"L32","","Append `dword` as little-endian.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"B32","","Append `dword` as big-endian.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"D64","","Append `qword` with the Section's default endianness.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"L64","","Append `qword` as little-endian.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}],[11,"B64","","Append `qword` as big-endian.",0,{"inputs":[{"name":"section"},{"name":"t"}],"output":{"name":"section"}}]],"paths":[[3,"Section"],[4,"Endian"],[4,"LabelOrNum"],[8,"LabelMaker"],[8,"ToLabelOrNum"],[3,"RealLabel"],[3,"Label"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);

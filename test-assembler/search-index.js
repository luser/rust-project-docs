var searchIndex = {};
searchIndex["test_assembler"] = {"doc":"A set of types for building complex binary streams.","items":[[3,"RealLabel","test_assembler","The inner workings of `Label`. Don&#39;t instanitate this, instantiate `Label`.",null,null],[3,"Label","","A `Label` represents a value not yet known that is stored in a `Section`.",null,null],[12,"0","","",0,null],[3,"Section","","A section is a sequence of bytes, constructed by appending bytes to the end.",null,null],[12,"endian","","The current endianness of the writer.",1,null],[4,"Endian","","Possible byte orders",null,null],[13,"Big","","",2,null],[13,"Little","","",2,null],[4,"LabelOrNum","","An enum to hold `Label`s or `Num`s.",null,null],[13,"Label","","",3,null],[13,"Num","","",3,null],[17,"DEFAULT_ENDIAN","","The default endianness for this system.",null,null],[8,"LabelMaker","","Methods for creating a `Label` (or a `RealLabel`, but don&#39;t do that).",null,null],[10,"new","","Create an undefined label.",4,{"inputs":[],"output":{"name":"self"}}],[10,"from_const","","Create a label with a constant value `val`.",4,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[10,"from_label","","Create a label whose value is equal to `other`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_label_offset","","Create a label whose value is equal to `other` plus `offset`.",4,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"self"}}],[8,"Num","","A marker trait for number types.",null,null],[8,"ToLabelOrNum","","A trait to allow passing numbers or Labels.",null,null],[10,"to_labelornum","","",5,null],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",6,null],[11,"value","","Get the constant value of the `RealLabel`, if known.",6,null],[11,"offset","","Get the relative offset from another label, if possible.",6,null],[11,"set_const","","Set this `RealLabel`s value to `val`.",6,null],[11,"set","","Set this `RealLabel`s value equal to `other`.",6,null],[11,"new","","",6,{"inputs":[],"output":{"name":"reallabel"}}],[11,"from_const","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"reallabel"}}],[11,"from_label","","",6,{"inputs":[{"name":"reallabel"}],"output":{"name":"reallabel"}}],[11,"from_label_offset","","",6,{"inputs":[{"name":"reallabel"},{"name":"i64"}],"output":{"name":"reallabel"}}],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"deref","","",0,null],[11,"new","","",0,{"inputs":[],"output":{"name":"label"}}],[11,"from_const","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"label"}}],[11,"from_label","","",0,{"inputs":[{"name":"label"}],"output":{"name":"label"}}],[11,"from_label_offset","","",0,{"inputs":[{"name":"label"},{"name":"i64"}],"output":{"name":"label"}}],[11,"new","","Construct a `Section` with platform-default endianness.",1,{"inputs":[],"output":{"name":"section"}}],[11,"with_endian","","Construct a `Section` with `endian` endianness.",1,{"inputs":[{"name":"endian"}],"output":{"name":"section"}}],[11,"size","","Return the current size of the section.",1,null],[11,"get_contents","","Get the contents of this section as a slice of bytes.",1,null],[11,"start","","Return a label representing the start of the section.",1,null],[11,"here","","A label representing the point at which the next Appended item will appear in the section, relative to start().",1,null],[11,"mark","","Set `label` to Here, and return this section.",1,null],[11,"append_bytes","","Append `data` to the end of this section.",1,null],[11,"append_section","","Append `section`&#39;s contents to the end of this section.",1,null],[11,"append_repeated","","Append `count` copies of `byte` to the end of this section.",1,null],[11,"align","","Jump to the next location aligned on an `alignment`-byte boundary, relative to the start of the section.",1,null],[11,"D8","","Append `byte` with the Section&#39;s default endianness.",1,null],[11,"L8","","Append `byte` as little-endian (identical to `D8`).",1,null],[11,"B8","","Append `byte` as big-endian (identical to `D8`).",1,null],[11,"D16","","Append `word` with the Section&#39;s default endianness.",1,null],[11,"L16","","Append `word` as little-endian.",1,null],[11,"B16","","Append `word` as big-endian.",1,null],[11,"D32","","Append `dword` with the Section&#39;s default endianness.",1,null],[11,"L32","","Append `dword` as little-endian.",1,null],[11,"B32","","Append `dword` as big-endian.",1,null],[11,"D64","","Append `qword` with the Section&#39;s default endianness.",1,null],[11,"L64","","Append `qword` as little-endian.",1,null],[11,"B64","","Append `qword` as big-endian.",1,null]],"paths":[[3,"Label"],[3,"Section"],[4,"Endian"],[4,"LabelOrNum"],[8,"LabelMaker"],[8,"ToLabelOrNum"],[3,"RealLabel"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
